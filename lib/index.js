// Generated by CoffeeScript 1.12.7
var AWS, Client, Promise, Service,
  slice = [].slice;

AWS = require('aws-sdk');

Promise = require('bluebird');

Client = (function() {
  function Client(options) {
    if (options == null) {
      options = {};
    }
    this.lambda = new AWS.Lambda(options);
  }

  Client.prototype.remote = function() {
    var args, cb, i, method, service;
    service = arguments[0], method = arguments[1], args = 4 <= arguments.length ? slice.call(arguments, 2, i = arguments.length - 1) : (i = 2, []), cb = arguments[i++];
    service = service.replace(':', '-');
    return this.lambda.invoke({
      FunctionName: service,
      Payload: JSON.stringify({
        method: method,
        args: args
      })
    }, function(err, data) {
      if (err != null) {
        return cb(err);
      } else {
        return cb(null, JSON.parse(data.Payload));
      }
    });
  };

  Client.prototype.remotePromise = function() {
    var args, method, ref, service;
    service = arguments[0], method = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return Promise.fromCallback((ref = this.remote).bind.apply(ref, [this, service, method].concat(slice.call(args))));
  };

  return Client;

})();

Service = function(name, methods) {
  if (methods == null) {
    methods = {};
  }
  return function(event, context, cb) {
    var args, method;
    method = event.method, args = event.args;
    args || (args = []);
    return methods[method].apply(methods, slice.call(args).concat([cb]));
  };
};

module.exports = {
  Client: Client,
  Service: Service
};
